[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dinara Zhorabek",
    "section": "",
    "text": "Hey, I’m Dinara!\nAn aspiring business analyst and avid traveler, passionate about continuous learning, problem-solving, and empowering others through data-driven solutions.\nI am pursuing a Master’s degree in Applied Business Analytics at Boston University and received a B.S. in Information and Communication Technology from Kazakh-British Technical University.\nI’m skilled in Python, R, SQL, Tableau and Power BI, and I am deeply committed to using data and technology to solve business challenges.\nDuring the final year of my bachelor’s studies, I began working full-time as a Full-Stack Software Engineer in the banking industry at VTB Bank Kazakhstan. In this role, I applied my academic knowledge in real-world scenarios and gained significant experience. In this role, I developed web applications from the ground up, enhanced existing ones, and managed databases. My work involved third-party API integrations, performance tuning, and seamless deployment into production environments. I led frontend and backend development using technologies such as Java, Node.js, React, and Oracle APEX, and worked extensively with PostgreSQL and Oracle databases. Additionally, I utilized tools like DBMS Profiler and Query Analyzer to optimize query performance and ensure system reliability.\nThis experience led me to discover a fascination with data management and analytics — the way data surrounds us and can yield powerful insights into trends, behaviors, and decision-making. This interest inspired me to dive deeper into data analytics through online courses, and ultimately, to pursue a graduate degree in Applied Business Analytics at Boston University. So now, I’m a graduate student:)\nSocial Media: You can find me on LinkedIn."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Personal Projects",
    "section": "",
    "text": "You Like This Song…But Will George Like It? \n&lt;p&gt;K-Nearest Neighbors clustering analysis.&lt;/p&gt;"
  },
  {
    "objectID": "about.html#social-media",
    "href": "about.html#social-media",
    "title": "About",
    "section": "Social Media:",
    "text": "Social Media:\nYou can find me on LinkedIn."
  },
  {
    "objectID": "spotify/analysis.html",
    "href": "spotify/analysis.html",
    "title": "K-Nearest Neighbors: You Like This Song…But Will George Like It?",
    "section": "",
    "text": "In this project, I’ll use k-NN clustering analysis to find out whether George—a fictional character—would vibe with my song or not.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(dplyr)\n\nspotify_2023 &lt;- read.csv('spotify-2023.csv')\nstr(spotify_2023)\n\n'data.frame':   953 obs. of  24 variables:\n $ track_name          : chr  \"Seven (feat. Latto) (Explicit Ver.)\" \"LALA\" \"vampire\" \"Cruel Summer\" ...\n $ artist.s._name      : chr  \"Latto, Jung Kook\" \"Myke Towers\" \"Olivia Rodrigo\" \"Taylor Swift\" ...\n $ artist_count        : int  2 1 1 1 1 2 2 1 1 2 ...\n $ released_year       : int  2023 2023 2023 2019 2023 2023 2023 2023 2023 2023 ...\n $ released_month      : int  7 3 6 8 5 6 3 7 5 3 ...\n $ released_day        : int  14 23 30 23 18 1 16 7 15 17 ...\n $ in_spotify_playlists: int  553 1474 1397 7858 3133 2186 3090 714 1096 2953 ...\n $ in_spotify_charts   : int  147 48 113 100 50 91 50 43 83 44 ...\n $ streams             : chr  \"141381703\" \"133716286\" \"140003974\" \"800840817\" ...\n $ in_apple_playlists  : int  43 48 94 116 84 67 34 25 60 49 ...\n $ in_apple_charts     : int  263 126 207 207 133 213 222 89 210 110 ...\n $ in_deezer_playlists : chr  \"45\" \"58\" \"91\" \"125\" ...\n $ in_deezer_charts    : int  10 14 14 12 15 17 13 13 11 13 ...\n $ in_shazam_charts    : chr  \"826\" \"382\" \"949\" \"548\" ...\n $ bpm                 : int  125 92 138 170 144 141 148 100 130 170 ...\n $ key                 : chr  \"B\" \"C#\" \"F\" \"A\" ...\n $ mode                : chr  \"Major\" \"Major\" \"Major\" \"Major\" ...\n $ danceability_.      : int  80 71 51 55 65 92 67 67 85 81 ...\n $ valence_.           : int  89 61 32 58 23 66 83 26 22 56 ...\n $ energy_.            : int  83 74 53 72 80 58 76 71 62 48 ...\n $ acousticness_.      : int  31 7 17 11 14 19 48 37 12 21 ...\n $ instrumentalness_.  : int  0 0 0 0 63 0 0 0 0 0 ...\n $ liveness_.          : int  8 10 31 11 11 8 8 11 28 8 ...\n $ speechiness_.       : int  4 4 6 15 6 24 3 4 9 33 ...\n\n\nMy song is Money Trees - Kendrick Lamar, Jay Rock. I’m a big fan of Kendrick’s music, and especially songs from this album is one of the favorites of mine.\nHere is the values of this song from dataset:\ndanceability: 74\nenergy: 53\nspeechiness: 10\nacousticness: 7\nliveness: 21\nvalence: 37\nBPM: 144\n\nmy_song &lt;- spotify_2023 %&gt;% filter(track_name == 'Money Trees')\nmy_song\n\n   track_name           artist.s._name artist_count released_year\n1 Money Trees Kendrick Lamar, Jay Rock            2          2012\n  released_month released_day in_spotify_playlists in_spotify_charts    streams\n1              1            1                26792                32 1093605526\n  in_apple_playlists in_apple_charts in_deezer_playlists in_deezer_charts\n1                 69             113                 695                0\n  in_shazam_charts bpm key  mode danceability_. valence_. energy_.\n1              458 144   E Minor             74        37       53\n  acousticness_. instrumentalness_. liveness_. speechiness_.\n1              7                  0         21            10\n\n\n\nspotify &lt;- read.csv('spotify.csv')\n\nstr(spotify)\n\n'data.frame':   2017 obs. of  17 variables:\n $ X               : int  0 1 2 3 4 5 6 7 8 9 ...\n $ acousticness    : num  0.0102 0.199 0.0344 0.604 0.18 0.00479 0.0145 0.0202 0.0481 0.00208 ...\n $ danceability    : num  0.833 0.743 0.838 0.494 0.678 0.804 0.739 0.266 0.603 0.836 ...\n $ duration_ms     : int  204600 326933 185707 199413 392893 251333 241400 349667 202853 226840 ...\n $ energy          : num  0.434 0.359 0.412 0.338 0.561 0.56 0.472 0.348 0.944 0.603 ...\n $ instrumentalness: num  2.19e-02 6.11e-03 2.34e-04 5.10e-01 5.12e-01 0.00 7.27e-06 6.64e-01 0.00 0.00 ...\n $ key             : int  2 1 2 5 5 8 1 10 11 7 ...\n $ liveness        : num  0.165 0.137 0.159 0.0922 0.439 0.164 0.207 0.16 0.342 0.571 ...\n $ loudness        : num  -8.79 -10.4 -7.15 -15.24 -11.65 ...\n $ mode            : int  1 1 1 1 0 1 1 0 0 1 ...\n $ speechiness     : num  0.431 0.0794 0.289 0.0261 0.0694 0.185 0.156 0.0371 0.347 0.237 ...\n $ tempo           : num  150.1 160.1 75 86.5 174 ...\n $ time_signature  : num  4 4 4 4 4 4 4 4 4 4 ...\n $ valence         : num  0.286 0.588 0.173 0.23 0.904 0.264 0.308 0.393 0.398 0.386 ...\n $ target          : int  1 1 1 1 1 1 1 1 1 1 ...\n $ song_title      : chr  \"Mask Off\" \"Redbone\" \"Xanny Family\" \"Master Of None\" ...\n $ artist          : chr  \"Future\" \"Childish Gambino\" \"Future\" \"Beach House\" ...\n\nspotify$target &lt;- factor(spotify$target)\nlevels(spotify$target)\n\n[1] \"0\" \"1\"\n\ntable(spotify$target)\n\n\n   0    1 \n 997 1020 \n\n\n\nData Exploration\nTarget variable is of type int, then I converted it to categorical variable (factor).\nThe target factor variable has 2 categories: 0 or 1. By counting total number of rows for each category, we get that George has 1020 favorite, and 997 disliked songs. Which is interesting, that number of disliked ones pretty close to liked. The music taste of George can be diverse, and Spotify’s recommendation system might be actively adjusting to his preferences. Actually, when you dislike one song in Spotify, the system tries to not suggest you similar songs, and try other different options. To state this opinion constantly we need to explore more about song preferences of George. Furthermore, there are could be temporal patterns in George’s preferences, for instance he prefer certain types of songs at different times of day, month or year.\n\ncolSums(is.na(spotify))\n\n               X     acousticness     danceability      duration_ms \n               0                0                0                0 \n          energy instrumentalness              key         liveness \n               0                0                0                0 \n        loudness             mode      speechiness            tempo \n               0                0                0                0 \n  time_signature          valence           target       song_title \n               0                0                0                0 \n          artist \n               0 \n\n\nThere is no NA values in this dataset.\n\nsummary(spotify_2023)\n\n  track_name        artist.s._name      artist_count   released_year \n Length:953         Length:953         Min.   :1.000   Min.   :1930  \n Class :character   Class :character   1st Qu.:1.000   1st Qu.:2020  \n Mode  :character   Mode  :character   Median :1.000   Median :2022  \n                                       Mean   :1.556   Mean   :2018  \n                                       3rd Qu.:2.000   3rd Qu.:2022  \n                                       Max.   :8.000   Max.   :2023  \n released_month    released_day   in_spotify_playlists in_spotify_charts\n Min.   : 1.000   Min.   : 1.00   Min.   :   31        Min.   :  0.00   \n 1st Qu.: 3.000   1st Qu.: 6.00   1st Qu.:  875        1st Qu.:  0.00   \n Median : 6.000   Median :13.00   Median : 2224        Median :  3.00   \n Mean   : 6.034   Mean   :13.93   Mean   : 5200        Mean   : 12.01   \n 3rd Qu.: 9.000   3rd Qu.:22.00   3rd Qu.: 5542        3rd Qu.: 16.00   \n Max.   :12.000   Max.   :31.00   Max.   :52898        Max.   :147.00   \n   streams          in_apple_playlists in_apple_charts  in_deezer_playlists\n Length:953         Min.   :  0.00     Min.   :  0.00   Length:953         \n Class :character   1st Qu.: 13.00     1st Qu.:  7.00   Class :character   \n Mode  :character   Median : 34.00     Median : 38.00   Mode  :character   \n                    Mean   : 67.81     Mean   : 51.91                      \n                    3rd Qu.: 88.00     3rd Qu.: 87.00                      \n                    Max.   :672.00     Max.   :275.00                      \n in_deezer_charts in_shazam_charts        bpm            key           \n Min.   : 0.000   Length:953         Min.   : 65.0   Length:953        \n 1st Qu.: 0.000   Class :character   1st Qu.:100.0   Class :character  \n Median : 0.000   Mode  :character   Median :121.0   Mode  :character  \n Mean   : 2.666                      Mean   :122.5                     \n 3rd Qu.: 2.000                      3rd Qu.:140.0                     \n Max.   :58.000                      Max.   :206.0                     \n     mode           danceability_.    valence_.        energy_.    \n Length:953         Min.   :23.00   Min.   : 4.00   Min.   : 9.00  \n Class :character   1st Qu.:57.00   1st Qu.:32.00   1st Qu.:53.00  \n Mode  :character   Median :69.00   Median :51.00   Median :66.00  \n                    Mean   :66.97   Mean   :51.43   Mean   :64.28  \n                    3rd Qu.:78.00   3rd Qu.:70.00   3rd Qu.:77.00  \n                    Max.   :96.00   Max.   :97.00   Max.   :97.00  \n acousticness_.  instrumentalness_.   liveness_.    speechiness_.  \n Min.   : 0.00   Min.   : 0.000     Min.   : 3.00   Min.   : 2.00  \n 1st Qu.: 6.00   1st Qu.: 0.000     1st Qu.:10.00   1st Qu.: 4.00  \n Median :18.00   Median : 0.000     Median :12.00   Median : 6.00  \n Mean   :27.06   Mean   : 1.581     Mean   :18.21   Mean   :10.13  \n 3rd Qu.:43.00   3rd Qu.: 0.000     3rd Qu.:24.00   3rd Qu.:11.00  \n Max.   :97.00   Max.   :91.000     Max.   :97.00   Max.   :64.00  \n\nspotify_2023$danceability_. &lt;- spotify_2023$danceability_./100\nspotify_2023$energy_. &lt;- spotify_2023$energy_./100\nspotify_2023$speechiness_. &lt;- spotify_2023$speechiness_./100\nspotify_2023$valence_. &lt;- spotify_2023$valence_./100\nspotify_2023$acousticness_. &lt;- spotify_2023$acousticness_./100\nspotify_2023$liveness_. &lt;- spotify_2023$liveness_./100\n\nspotify_2023 &lt;- spotify_2023 %&gt;% rename(danceability=danceability_., energy=energy_., speechiness=speechiness_., valence=valence_., acousticness=acousticness_., liveness=liveness_., tempo=bpm)\n\nmy_song &lt;- spotify_2023 %&gt;% filter(track_name == 'Money Trees')\n\nI converted the values in spotify_23 to decimal format. Also, applied the same changes to my_song by recreating it.\n\n\nData Partition\n\nset.seed(79)\nspotify.index &lt;- sample(c(1:nrow(spotify)), nrow(spotify)*0.6)\nspotify_train.df &lt;- spotify[spotify.index, ]\nspotify_valid.df &lt;- spotify[-spotify.index, ]\n\n\nliked &lt;- spotify_train.df %&gt;% filter(target==1)\ndisliked &lt;- spotify_train.df %&gt;% filter(target==0)\n\nt.test(liked$danceability, disliked$danceability)\n\n\n    Welch Two Sample t-test\n\ndata:  liked$danceability and disliked$danceability\nt = 5.9297, df = 1198.7, p-value = 3.965e-09\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.03618685 0.07197390\nsample estimates:\nmean of x mean of y \n0.6451020 0.5910216 \n\nt.test(liked$tempo, disliked$tempo)\n\n\n    Welch Two Sample t-test\n\ndata:  liked$tempo and disliked$tempo\nt = 0.32976, df = 1188, p-value = 0.7416\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -2.495354  3.503627\nsample estimates:\nmean of x mean of y \n 121.3866  120.8825 \n\nt.test(liked$energy, disliked$energy)\n\n\n    Welch Two Sample t-test\n\ndata:  liked$energy and disliked$energy\nt = 0.90709, df = 1116.6, p-value = 0.3646\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.01228227  0.03340286\nsample estimates:\nmean of x mean of y \n0.6986168 0.6880565 \n\nt.test(liked$speechiness, disliked$speechiness)\n\n\n    Welch Two Sample t-test\n\ndata:  liked$speechiness and disliked$speechiness\nt = 5.9565, df = 1102.5, p-value = 3.461e-09\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.01988822 0.03942699\nsample estimates:\n mean of x  mean of y \n0.10598684 0.07632924 \n\nt.test(liked$valence, disliked$valence)\n\n\n    Welch Two Sample t-test\n\ndata:  liked$valence and disliked$valence\nt = 3.4455, df = 1207.9, p-value = 0.0005895\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n 0.02065933 0.07529932\nsample estimates:\nmean of x mean of y \n0.5254077 0.4774284 \n\nt.test(liked$acousticness, disliked$acousticness)\n\n\n    Welch Two Sample t-test\n\ndata:  liked$acousticness and disliked$acousticness\nt = -4.0701, df = 1122.3, p-value = 5.028e-05\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.08721203 -0.03047773\nsample estimates:\nmean of x mean of y \n0.1508101 0.2096550 \n\nt.test(liked$liveness, disliked$liveness)\n\n\n    Welch Two Sample t-test\n\ndata:  liked$liveness and disliked$liveness\nt = 1.5056, df = 1192.1, p-value = 0.1324\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.004181182  0.031773731\nsample estimates:\nmean of x mean of y \n0.1991905 0.1853942 \n\n\nBased on the results above, here is the list of variables that show significant difference: Danceability(p_value = 3.965e-09), speechiness(p-value = 3.461e-09), valence(p-value = 0.0005895), acousticness(p-value = 5.028e-05). Very low p-value suggests that, there is significant difference on this values between liked and disliked songs, making them main parameters to identify George’s preferences in music. Other remaining variables have p-value more than typical threshold 0.05: tempo(p-value = 0.7416), energy(p-value = 0.3646), liveness(p-value = 0.1324).\n\nspotify_train.df &lt;- spotify_train.df %&gt;% select(-tempo, -energy, -liveness)\n\nk-NN method draws information from similarities between the variables by measuring distance between records. Variables with similar values across different outcome classes cannot provide useful information for distinguishing between groups. Including such variables can lead to overfitting, where the model performs well on training data but fails to generalize to new data. These insignificant variables affect the distance calculation, making it harder to distinguish between groups.\n\nhead(spotify_train.df)\n\n        X acousticness danceability duration_ms instrumentalness key loudness\n1454 1453      0.02140        0.587      198426            0.698   4   -4.439\n703   702      0.32000        0.723      210880            0.000   5   -7.110\n1155 1154      0.00464        0.565      225526            0.000   1   -5.220\n1048 1047      0.09150        0.533      230722            0.000   0   -8.266\n311   310      0.04980        0.403      274480            0.000  11   -5.889\n1522 1521      0.97300        0.478      388040            0.939   5  -20.847\n     mode speechiness time_signature valence target\n1454    0      0.0375              4   0.201      0\n703     1      0.0833              4   0.261      1\n1155    1      0.2120              4   0.551      0\n1048    1      0.0324              4   0.506      0\n311     0      0.3380              4   0.734      1\n1522    1      0.0505              4   0.235      0\n                            song_title                   artist\n1454                            Legacy Dimitri Vangelis & Wyman\n703       25 Bucks [feat. Purity Ring]              Danny Brown\n1155 Good Life (with G-Eazy & Kehlani)                   G-Eazy\n1048                        Real Thing           Zac Brown Band\n311                         Auditorium                  Mos Def\n1522                     For Wee Folks           Joey Alexander\n\n\n\n\nNormalization\nIn this step we are normalizing only those columns that will be used in k-NN model building.\n\nlibrary(caret)\n\nLoading required package: lattice\n\n\n\nAttaching package: 'caret'\n\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nspotify_train_norm.df &lt;- spotify_train.df\nspotify_valid_norm.df &lt;- spotify_valid.df\nspotify_norm.df &lt;- spotify\nmy_song_norm &lt;- my_song\n\n\nnorm_values &lt;- preProcess(\n  spotify_train.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")], \n  method = c(\"center\", \"scale\"))\n\nspotify_train_norm.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")] &lt;- \n  predict(norm_values, spotify_train.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")])\n# View(spotify_train_norm.df)\n\nspotify_valid_norm.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")] &lt;- \n  predict(norm_values, spotify_valid.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")])\n# View(spotify_valid_norm.df)\n\nspotify_norm.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")] &lt;- \n  predict(norm_values, spotify[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")])\n# View(spotify_norm.df)\n\nmy_song_norm[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")] &lt;- \n  predict(norm_values, my_song[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")])\nmy_song_norm\n\n   track_name           artist.s._name artist_count released_year\n1 Money Trees Kendrick Lamar, Jay Rock            2          2012\n  released_month released_day in_spotify_playlists in_spotify_charts    streams\n1              1            1                26792                32 1093605526\n  in_apple_playlists in_apple_charts in_deezer_playlists in_deezer_charts\n1                 69             113                 695                0\n  in_shazam_charts tempo key  mode danceability    valence energy acousticness\n1              458   144   E Minor    0.7569021 -0.5406409   0.53   -0.4355796\n  instrumentalness_. liveness speechiness\n1                  0     0.21  0.09968928\n\n\n\n\nClustering\n\n\n[1] 1\nattr(,\"nn.index\")\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]  823  966  277  929  653  984  436\nattr(,\"nn.dist\")\n          [,1]      [,2]      [,3]      [,4]      [,5]     [,6]      [,7]\n[1,] 0.0233238 0.3074891 0.3136877 0.3537573 0.4308537 0.471654 0.4811864\nLevels: 1\n\n\n           song_title         artist target acousticness danceability\n527       Money Trees Kendrick Lamar      1       0.0726        0.739\n1429        My Friend            EDX      0       0.0330        0.707\n633              Kids         Iamsu!      1       0.1210        0.719\n348          Pacifier     Young Thug      1       0.0469        0.766\n728           Falling           HAIM      1       0.0760        0.741\n800  18 With A Bullet Pete Wingfield      1       0.0625        0.758\n189       N.O. Bounce    Big Freedia      1       0.0190        0.695\n     speechiness valence\n527       0.1010   0.374\n1429      0.0901   0.403\n633       0.0829   0.357\n348       0.1240   0.401\n728       0.0690   0.310\n800       0.1060   0.260\n189       0.1270   0.337\n\n\nBy running k-NN model as a result get “1”, which indicates that George will like my song. And by listing 7 nearest neighbors, I see that my song is also in this list and George already marked it as favorite. Within this songs, George marked only one song as disliked, which highlights not all similar songs are guaranteed to be liked. This disliked song has high valence value compared to others, but there is no difference in other variables. By running knn classification we get 7 nearest records with low distance value from our selected song. So if we just use numbers these songs look very similar to each other. But they are not. And the diversity of artists suggests George’s musical preferences are varied.\n\naccuracy.df &lt;- data.frame(k = seq(1,14,1), accuracy = rep(0,14))\n\nfor(i in 1:14) {\n  knn.pred &lt;- knn( train = spotify_train_norm.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")],\n           test = spotify_valid_norm.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")],\n           cl = spotify_train_norm.df[,c(\"target\")],\n           k=i)\n  \n  accuracy.df[i, 2] &lt;- confusionMatrix(knn.pred, spotify_valid_norm.df[ ,c(\"target\")])$overall['Accuracy']\n}\n\naccuracy.df[order(-accuracy.df$accuracy), ]\n\n    k  accuracy\n14 14 0.6183395\n12 12 0.6096654\n13 13 0.6096654\n10 10 0.6084263\n11 11 0.6034696\n5   5 0.6022305\n9   9 0.5997522\n4   4 0.5972739\n6   6 0.5960347\n8   8 0.5947955\n3   3 0.5885998\n7   7 0.5861214\n1   1 0.5774473\n2   2 0.5662949\n\n\nFrom the list above we can see accuracy for different k values between 1 and 14. We can see that the difference in accuracy between values is very small. k=14 has highest accuracy value 0.6183395, also k=5 provides very similar number 0.6022305.\n\n\n\n\n\n\n\n\n\nThe graph clearly illustrates the differences in accuracy across various k-values. k = 10 has about 61% accuracy, similar to k = 12 and k = 13. Since they give the same result, k = 10 is a better choice to reduce noise. Additionally, the previously used k = 7 had one of the lowest accuracy scores at 59%. While k = 14 had the highest accuracy at 62%, k = 10 appears to be a more balanced choice. Selecting 10 nearest neighbors should provide a more reliable classification of my song.\n\nnn_10 &lt;- knn( train = spotify_train_norm.df[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")],\n           test = my_song_norm[, c(\"acousticness\", \"danceability\", \"speechiness\", \"valence\")],\n           cl = spotify_train_norm.df[,c(\"target\")],##what we are classifying: like or dislike\n           k=10)\nnn_10\n\n[1] 1\nattr(,\"nn.index\")\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n[1,]  823  966  277  929  653  984  436  476  136   127\nattr(,\"nn.dist\")\n          [,1]      [,2]      [,3]      [,4]      [,5]     [,6]      [,7]\n[1,] 0.0233238 0.3074891 0.3136877 0.3537573 0.4308537 0.471654 0.4811864\n         [,8]      [,9]     [,10]\n[1,] 0.501667 0.5050047 0.5092467\nLevels: 1\n\nnn_indexes_10 &lt;- row.names(spotify_train.df)[attr(nn_10, \"nn.index\")]\nspotify_train.df[nn_indexes_10, ] %&gt;% select(song_title, artist, target, acousticness, danceability, speechiness, valence)\n\n           song_title         artist target acousticness danceability\n527       Money Trees Kendrick Lamar      1       0.0726        0.739\n1429        My Friend            EDX      0       0.0330        0.707\n633              Kids         Iamsu!      1       0.1210        0.719\n348          Pacifier     Young Thug      1       0.0469        0.766\n728           Falling           HAIM      1       0.0760        0.741\n800  18 With A Bullet Pete Wingfield      1       0.0625        0.758\n189       N.O. Bounce    Big Freedia      1       0.0190        0.695\n661        Next Order      Dog Blood      1       0.0155        0.760\n1191    Glad You Came     The Wanted      0       0.0643        0.755\n1094           Hey DJ           CNCO      0       0.0309        0.792\n     speechiness valence\n527       0.1010   0.374\n1429      0.0901   0.403\n633       0.0829   0.357\n348       0.1240   0.401\n728       0.0690   0.310\n800       0.1060   0.260\n189       0.1270   0.337\n661       0.0733   0.294\n1191      0.0687   0.454\n1094      0.0867   0.450\n\n\nI chose k=10 as optimal with moderate accuracy value. The output of model didn’t change, it indicates George will like my song. But for now I got 10 nearest neighbors, and from this new list George disliked 3 songs. All these songs have high value of danceability around 70%, low speechiness and acousticness. All 3 disliked songs as for k=7, have higher value of valence compared to others. Higher valence indicates more positive, cheerful, or euphoric songs. It seems that George might prefer songs with lower valence, which are less positive, more neutral in mood or moodier over cheerful ones. Disliked songs have relatively low acousticness, this suggest that George prefer songs with slightly more acoustic elements. The danceability is quite similar for both groups, which implies this factor is not strong in determining preferences. The disliked songs have relatively low speechiness, and some liked songs have higher speechiness (‘Pacifier’ has 0.1240) indicating George prefer songs with more spoken lyrics or rap.\n\n\nLimitations of model\nI think main limitation here is that we are relying on numerical variables to predict whether someone will like this song or not. There are can be other factors such as good memories or associations with a song which can make them favorite. Also lyrics play main role in connecting with listeners on an emotional level. For instance, I tend to prefer songs with meaningful lyrics, while rap elements often give me an energy boost. Additionally, music preferences can vary based on context—what I listen to at the gym or while walking differs from what I play in the evening when I can’t sleep."
  }
]